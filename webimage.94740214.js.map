{"version":3,"sources":["../node_modules/geotiff/dist-module/compression/webimage.js"],"names":["WebImageDecoder","BaseDecoder","constructor","createImageBitmap","Error","document","OffscreenCanvas","decode","fileDirectory","buffer","blob","Blob","imageBitmap","canvas","createElement","width","height","ctx","getContext","drawImage","getImageData","data"],"mappings":";AAQyD,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EARzD,IAAA,EAAA,EAAA,QAAA,qBAQyD,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAA1C,MAAMA,UAAwBC,EAA9B,QACbC,cAEM,GADJ,QACiC,oBAAtBC,kBACH,MAAA,IAAIC,MAAM,kEACX,GAAwB,oBAAbC,UAAuD,oBAApBC,gBAC7C,MAAA,IAAIF,MAAM,uFAIdG,aAAOC,EAAeC,GACpBC,MAAAA,EAAO,IAAIC,KAAK,CAACF,IACjBG,QAAoBT,kBAAkBO,GAExCG,IAAAA,EACoB,oBAAbR,WACTQ,EAASR,SAASS,cAAc,WACzBC,MAAQH,EAAYG,MAC3BF,EAAOG,OAASJ,EAAYI,QAE5BH,EAAS,IAAIP,gBAAgBM,EAAYG,MAAOH,EAAYI,QAGxDC,MAAAA,EAAMJ,EAAOK,WAAW,MAMvBD,OALPA,EAAIE,UAAUP,EAAa,EAAG,GAKvBK,EAAIG,aAAa,EAAG,EAAGR,EAAYG,MAAOH,EAAYI,QAAQK,KAAKZ,QA7BrB,QAAA,QAAA","file":"webimage.94740214.js","sourceRoot":"../examples","sourcesContent":["import BaseDecoder from './basedecoder.js';\n\n/**\n * class WebImageDecoder\n *\n * This decoder uses the browsers image decoding facilities to read image\n * formats like WebP when supported.\n */\nexport default class WebImageDecoder extends BaseDecoder {\n  constructor() {\n    super();\n    if (typeof createImageBitmap === 'undefined') {\n      throw new Error('Cannot decode WebImage as `createImageBitmap` is not available');\n    } else if (typeof document === 'undefined' && typeof OffscreenCanvas === 'undefined') {\n      throw new Error('Cannot decode WebImage as neither `document` nor `OffscreenCanvas` is not available');\n    }\n  }\n\n  async decode(fileDirectory, buffer) {\n    const blob = new Blob([buffer]);\n    const imageBitmap = await createImageBitmap(blob);\n\n    let canvas;\n    if (typeof document !== 'undefined') {\n      canvas = document.createElement('canvas');\n      canvas.width = imageBitmap.width;\n      canvas.height = imageBitmap.height;\n    } else {\n      canvas = new OffscreenCanvas(imageBitmap.width, imageBitmap.height);\n    }\n\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(imageBitmap, 0, 0);\n\n    // TODO: check how many samples per pixel we have, and return RGB/RGBA accordingly\n    // it seems like GDAL always encodes via RGBA which does not require a translation\n\n    return ctx.getImageData(0, 0, imageBitmap.width, imageBitmap.height).data.buffer;\n  }\n}\n"]}